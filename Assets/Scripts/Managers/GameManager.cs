using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

public class GameManager : Singleton<GameManager>
{
    public enum GameState
    {
        Building,
        Defending
    }

    [Header("Waves")]
    [SerializeField] private bool m_playInfinite = false;
    [SerializeField] private WaveData[] m_waves;

    [Header("Resources")]
    [SerializeField] private int m_startingLives = 100;
    [SerializeField] private int m_startingCash = 500;

    [SerializeField] private int m_endOfRoundCash = 100;


    /// <summary>
    /// The Current GameState.
    /// </summary>
    public GameState CurrentState { get; private set; }

    /// <summary>
    /// The Current Speed of the Game. This only takes effect while defending.
    /// </summary>
    public float CurrentGameSpeed { get; private set; } = 1.0f;

    /// <summary>
    /// The index of the currently active wave.
    /// During building this is the index of the next wave.
    /// </summary>
    public int CurrentWave { get; private set; }

    /// <summary>
    /// The number of waves to beat, to win the game.
    /// </summary>
    public int MaxWaves => m_waves.Length;

    /// <summary>
    /// Current Lives. If this reaches zero, the game is lost.
    /// </summary>
    public int CurrentLives { get; private set; }

    /// <summary>
    /// Current cash. Generated by defeating enemies and used to buy towers.
    /// </summary>
    public int CurrentCash { get; private set; }


    private void Start()
    {
        // Start with building
        SetGameState(GameState.Building);

        CurrentLives = m_startingLives;
        CurrentCash = m_startingCash;
    }


    private void Update()
    {
        // While defending
        if (CurrentState == GameState.Defending)
        {
            // Scale the time to get faster game speeds
            Time.timeScale = CurrentGameSpeed;

            // Is the wave cleared?
            if (!EnemySpawner.Instance.IsSpawning && EnemyController.ActiveEnemies.Count <= 0)
            {
                // For testing, we loop waves back around to play infinite
                if(m_playInfinite)
                {
                    CurrentWave = (CurrentWave + 1) % MaxWaves;
                }
                else
                {
                    // Have we beaten the game?
                    CurrentWave++;
                    if (CurrentWave >= MaxWaves)
                        EndGame(true);
                }                

                // Reset time scale
                Time.timeScale = 1;

                // Reward a little bit of cash and start building
                RewardCash(m_endOfRoundCash);
                SetGameState(GameState.Building);
            }
        }
    }


    private void SetGameState(GameState nextState)
    {
        CurrentState = nextState;
    }


    /// <summary>
    /// Toggles the game speed up to a maximum and then resets it again.
    /// Steps are 1 -> 2 -> 4 -> 8 -> 1 -> ...
    /// </summary>
    public void ChangeGameSpeed()
    {
        if (CurrentGameSpeed < 8)
        {
            CurrentGameSpeed *= 2;
        }
        else
        {
            CurrentGameSpeed = 1;
        }
    }


    /// <summary>
    /// Starts the next wave, if we can.
    /// </summary>
    public void StartNextWave()
    {
        if (CurrentState != GameState.Building)
            return;

        SetGameState(GameState.Defending);

        // Queue the wave to be spawned
        EnemySpawner.Instance.SpawnWave(m_waves[CurrentWave]);
    }


    /// <summary>
    /// Reward some cash to the player.
    /// </summary>
    /// <param name="amount">The amount to reward</param>
    public void RewardCash(int amount)
    {
        if (amount < 0)
            return;

        CurrentCash += amount;
    }

    /// <summary>
    /// Use up cash. Can't use up more cash than you have.
    /// </summary>
    /// <param name="amount">The amount to use up</param>
    /// <returns>If we has enough cash and used it</returns>
    public bool UseCash(int amount)
    {
        if (amount < 0)
            return true;

        // Do we want to spend to much cash?
        if (amount > CurrentCash)
            return false;

        CurrentCash -= amount;
        return true;
    }

    /// <summary>
    /// Deal damage to the player.
    /// If the lives reach zero, the game is lost.
    /// </summary>
    /// <param name="amount">The amount of lives to leak</param>
    public void LeakLives(int amount)
    {
        if (amount < 0)
            return;

        CurrentLives -= amount;

        // Did we lose?
        if (CurrentLives <= 0)
            EndGame(false);
    }


    private void EndGame(bool hasWon)
    {
        // Load the defeat or victory scene
        if (hasWon)
        {
            SceneManager.LoadScene((int)SceneIndex.VictoryScreen);
        }
        else
        {
            SceneManager.LoadScene((int)SceneIndex.DefeatScreen);
        }
    }
}
